{"version":3,"file":"ruler.min.js","sources":["../src/consts.ts","../src/InnerRuler.tsx","../src/Ruler.tsx","../src/index.umd.ts"],"sourcesContent":["import { RulerProps, RulerInterface } from \"@scena/react-ruler/declaration/types\";\nimport {\n    PROPERTIES as RULER_PROPERTIES,\n    METHODS as RULER_METHODS,\n} from \"@scena/react-ruler\";\n\nexport const PROPERTIES: Array<keyof RulerProps> = RULER_PROPERTIES;\nexport const METHODS: Array<keyof RulerInterface> = RULER_METHODS;\n","import * as React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { ref } from \"framework-utils\";\nimport ReactRuler from \"@scena/react-ruler\";\nimport { InnerRulerProps } from \"./types\";\n\nexport default class InnerRuler extends React.Component<InnerRulerProps, InnerRulerProps> {\n    public state: InnerRulerProps = {};\n    public ruler: ReactRuler;\n    constructor(props: InnerRulerProps) {\n        super(props);\n        this.state = this.props;\n    }\n    public render() {\n        const { parentElement, ...state } = this.state;\n\n        return createPortal(<ReactRuler ref={ref(this, \"ruler\")} {...state} />, parentElement);\n    }\n}\n","import { ref, Properties } from \"framework-utils\";\nimport * as React from \"react\";\nimport { render } from \"react-dom\";\nimport { PROPERTIES } from \"./consts\";\nimport { RulerInterface, RulerProps } from \"@scena/react-ruler/declaration/types\";\nimport InnerRuler from \"./InnerRuler\";\n\n\n/**\n * A Ruler component that can draw grids and scroll infinitely.\n * @sort 1\n * @implements Ruler.RulerInterface\n */\n@Properties(PROPERTIES, (prototype, property) => {\n    Object.defineProperty(prototype, property, {\n        get() {\n            return this.getRuler().props[property];\n        },\n        set(value) {\n            this.innerRuler.setState({\n                [property]: value,\n            });\n        },\n        enumerable: true,\n        configurable: true,\n    });\n})\nclass Ruler implements RulerInterface {\n    private tempElement = document.createElement(\"div\");\n    private innerRuler!: InnerRuler;\n    /**\n     * @param - container\n     * @param {$ts:Partial<Ruler.RulerProps>} options - options\n     */\n    constructor(parentElement: HTMLElement, options: Partial<RulerProps> = {}) {\n        render(\n            <InnerRuler ref={ref(this, \"innerRuler\")}\n                {...options} parentElement={parentElement} />,\n            this.tempElement,\n        );\n    }\n    public scroll(scrollPos: number) {\n        this.getRuler().scroll(scrollPos);\n    }\n    public resize() {\n        this.getRuler().resize();\n    }\n    /**\n     * Remove Ruler\n     */\n    public destroy() {\n        render(null, this.tempElement);\n        this.tempElement = null;\n        this.innerRuler = null;\n    }\n    private getRuler() {\n        return this.innerRuler.ruler;\n    }\n}\n\nexport default Ruler;\n","import Ruler, * as others from \"./index.esm\";\n\nfor (const name in others) {\n    (Ruler as any)[name] = others[name];\n}\n\nexport default Ruler;\n"],"names":["PROPERTIES","METHODS","props","_super","_this","state","__extends","_a","parentElement","createPortal","React","ReactRuler","ref","this","options","document","createElement","render","InnerRuler","tempElement","scrollPos","getRuler","scroll","resize","innerRuler","ruler","Ruler","Properties","prototype","property","Object","defineProperty","get","set","value","setState","enumerable","configurable","name","others"],"mappings":";;;;;;;;0jiBAMaA,2SACAC,+CCEGC,SACRC,YAAMD,gBAHHE,QAAyB,GAI5BA,EAAKC,MAAQD,EAAKF,0IALcI,yBAOpC,eACUC,aAAEC,kBAAeH,0ZAEhBI,CAAaC,EAACC,KAAWC,IAAKA,EAAIC,KAAM,UAAcR,IAAWG,OAVxCE,2BC4BxBF,EAA4BM,gBAAAA,uBANlBC,SAASC,cAAc,OAOzCC,EACIP,EAACQ,KAAWN,IAAKA,EAAIC,KAAM,eACnBC,GAASN,cAAeA,KAChCK,KAAKM,+CAGb,SAAcC,QACLC,WAAWC,OAAOF,aAE3B,gBACSC,WAAWE,oBAKpB,WACIN,EAAO,KAAMJ,KAAKM,kBACbA,YAAc,UACdK,WAAa,iBAEtB,kBACWX,KAAKW,WAAWC,OA7BzBC,0ZAdLC,CAAW3B,EAAY,SAAC4B,EAAWC,GAChCC,OAAOC,eAAeH,EAAWC,EAAU,CACvCG,sBACWnB,KAAKQ,WAAWnB,MAAM2B,IAEjCI,aAAIC,cACKV,WAAWW,iBACXN,GAAWK,OAGpBE,YAAY,EACZC,cAAc,OAGhBX,0DCzBN,IAAK,IAAMY,KAAQC,EACdb,EAAcY,GAAQC,EAAOD"}